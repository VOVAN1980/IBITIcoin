// scripts/configure-production.js
require('dotenv').config();
const { ethers } = require('hardhat');
const readline = require('readline');

async function prompt(question) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise(resolve => rl.question(question, ans => { rl.close(); resolve(ans.trim()); }));
}

async function main() {
  // — 1. Получение цен монеты —
  const coinUsd = await prompt('Введите цену монеты (USD, в центах): ');
  const coinBnb = await prompt('Введите цену монеты в BNB (wei): ');
  const coinToken = await prompt('Введите цену монеты в токене (smallest unit): ');

  // — 2. Получение цен для каждого уровня NFT —
  const levels = [1, 3, 5, 7, 10, 15, 25, 50, 75, 100];
  const nftPricesUSD = {};
  for (const lvl of levels) {
    const price = await prompt(`Введите цену NFT для уровня ${lvl}% (USD, в центах): `);
    nftPricesUSD[lvl] = price;
  }

  // — 3. Получение USDT-параметра для IBITINFT —
  const nftIbi = await prompt('Введите цену NFT для IBITINFT (smallest unit IBI/USDT): ');

  // — 4. Адреса из .env —
  const {
    IBITI_TOKEN_ADDRESS,
    NFTSALEMANAGER_ADDRESS,
    IBITINFT_ADDRESS,
    USDT_TOKEN_ADDRESS
  } = process.env;
  const miss = [
    !IBITI_TOKEN_ADDRESS && 'IBITI_TOKEN_ADDRESS',
    !NFTSALEMANAGER_ADDRESS && 'NFTSALEMANAGER_ADDRESS',
    !IBITINFT_ADDRESS && 'IBITINFT_ADDRESS',
    !USDT_TOKEN_ADDRESS && 'USDT_TOKEN_ADDRESS'
  ].filter(x => x);
  if (miss.length) {
    console.error('❌ В .env не найдены адреса:', miss.join(', '));
    process.exit(1);
  }

  const [deployer] = await ethers.getSigners();
  console.log(`\n> Отправитель: ${deployer.address}\n`);

  // — 5. IBITIcoin: unpause + цены —
  const IB = await ethers.getContractFactory('IBITIcoin');
  const ibi = IB.attach(IBITI_TOKEN_ADDRESS);
  if (await ibi.paused()) {
    console.log('— IBITIcoin.paused → unpause()');
    await (await ibi.unpause()).wait();
  }
  console.log(`— setCoinPriceUSD(${coinUsd})`);
  await ibi.setCoinPriceUSD(coinUsd);
  console.log(`— setCoinPriceBNB(${coinBnb})`);
  await ibi.setCoinPriceBNB(coinBnb);
  console.log(`— setCoinPriceToken(${USDT_TOKEN_ADDRESS}, ${coinToken})`);
  await ibi.setCoinPriceToken(USDT_TOKEN_ADDRESS, coinToken);

  // — 6. NFTSaleManager: unpause + цены по уровням —
  const NSM = await ethers.getContractFactory('NFTSaleManager');
  const nsm = NSM.attach(NFTSALEMANAGER_ADDRESS);
  if (await nsm.paused()) {
    console.log('— NFTSaleManager.paused → unpause()');
    await (await nsm.unpause()).wait();
  }
  for (const lvl of levels) {
    const priceUsd = nftPricesUSD[lvl];
    console.log(`— setNFTPrice(${lvl}, ${priceUsd})`);
    await nsm.setNFTPrice(lvl, priceUsd);
  }

  // — 7. IBITINFT: unpause + USDT-параметры —
  const INFT = await ethers.getContractFactory('IBITINFT');
  const inft = INFT.attach(IBITINFT_ADDRESS);
  if (await inft.paused()) {
    console.log('— IBITINFT.paused → unpause()');
    await (await inft.unpause()).wait();
  }
  console.log(`— setUSDTParameters(${USDT_TOKEN_ADDRESS}, ${nftIbi})`);
  await inft.setUSDTParameters(USDT_TOKEN_ADDRESS, nftIbi);

  console.log('\n✅ Все контракты сконфигурированы.');
}

main().catch(err => { console.error('❌ Ошибка:', err); process.exit(1); });
